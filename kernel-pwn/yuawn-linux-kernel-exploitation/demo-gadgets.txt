


Gadgets
=======


0x000000000000003d: add al, ch; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000000030: add byte ptr [rax + 0x5566], bh; pop rbp; ret; 
0x0000000000000014: add byte ptr [rax + 0x6666], bh; pop rbp; ret; 
0x0000000000000036: add byte ptr [rax - 0x39], cl; mov dword ptr [rax], 0xe8000000; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000008d: add byte ptr [rax - 0x75], cl; test dword ptr [rax], ecx; add dword ptr [rax], eax; add byte ptr [rbp + 2], dh; leave; ret; 
0x0000000000000007: add byte ptr [rax - 0x77], cl; in eax, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000000061: add byte ptr [rax - 1], cl; ret; 
0x000000000000003b: add byte ptr [rax], al; add al, ch; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000000002e: add byte ptr [rax], al; add byte ptr [rax + 0x5566], bh; pop rbp; ret; 
0x0000000000000012: add byte ptr [rax], al; add byte ptr [rax + 0x6666], bh; pop rbp; ret; 
0x000000000000005f: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x00000000000001c3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000001c4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000001c5: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000000003a: add byte ptr [rax], al; add byte ptr [rax], al; call 0x43; pop rbp; ret; 
0x000000000000001d: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x10; xor eax, eax; pop rbp; ret; 
0x000000000000002d: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5566; pop rbp; ret; 
0x0000000000000011: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6666; pop rbp; ret; 
0x000000000000003f: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000001c6: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000000a1: add byte ptr [rax], al; add byte ptr [rax], al; push rbp; mov rbp, rsp; mov cr4, rdi; ret; 
0x0000000000000388: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000000a2: add byte ptr [rax], al; add byte ptr [rbp + 0x48], dl; mov ebp, esp; mov cr4, rdi; ret; 
0x00000000000000de: add byte ptr [rax], al; add byte ptr [rbp + 0x53], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000001e: add byte ptr [rax], al; add byte ptr [rbp - 0x13], dh; xor eax, eax; pop rbp; ret; 
0x00000000000001c7: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000003e7: add byte ptr [rax], al; add byte ptr [rdi + 0x3e], dh; cmp ebx, 0x666666; jne 0x414; mov cr4, rdi; ret; 
0x000000000000040b: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000003c: add byte ptr [rax], al; call 0x43; pop rbp; ret; 
0x00000000000003e8: add byte ptr [rax], al; ja 0x42a; cmp ebx, 0x666666; jne 0x414; mov cr4, rdi; ret; 
0x000000000000001f: add byte ptr [rax], al; jne 0x10; xor eax, eax; pop rbp; ret; 
0x00000000000000df: add byte ptr [rax], al; jne 0x136; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000000405: add byte ptr [rax], al; jne 0x49d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000000093: add byte ptr [rax], al; jne 0x99; leave; ret; 
0x000000000000002f: add byte ptr [rax], al; mov eax, 0x5566; pop rbp; ret; 
0x0000000000000013: add byte ptr [rax], al; mov eax, 0x6666; pop rbp; ret; 
0x000000000000008c: add byte ptr [rax], al; mov rax, qword ptr [rbp + 0x108]; jne 0x99; leave; ret; 
0x0000000000000006: add byte ptr [rax], al; mov rbp, rsp; call 0x10; pop rbp; ret; 
0x0000000000000035: add byte ptr [rax], al; mov rdi, 0; call 0x43; pop rbp; ret; 
0x0000000000000018: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000001c8: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000000a3: add byte ptr [rax], al; push rbp; mov rbp, rsp; mov cr4, rdi; ret; 
0x000000000000038a: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000003f1: add byte ptr [rbp + 0x20], dh; mov cr4, rdi; ret; 
0x00000000000000a4: add byte ptr [rbp + 0x48], dl; mov ebp, esp; mov cr4, rdi; ret; 
0x00000000000000e0: add byte ptr [rbp + 0x53], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000000094: add byte ptr [rbp + 2], dh; leave; ret; 
0x0000000000000020: add byte ptr [rbp - 0x13], dh; xor eax, eax; pop rbp; ret; 
0x00000000000001c9: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000000022c: add byte ptr [rcx], dh; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; pop r14; pop rbp; ret; 
0x00000000000003e9: add byte ptr [rdi + 0x3e], dh; cmp ebx, 0x666666; jne 0x414; mov cr4, rdi; ret; 
0x0000000000000406: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], edx; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000009d: add byte ptr [rsi - 0x70], ah; call 0xa5; push rbp; mov rbp, rsp; mov cr4, rdi; ret; 
0x0000000000000096: add cl, cl; ret; 
0x0000000000000092: add dword ptr [rax], eax; add byte ptr [rbp + 2], dh; leave; ret; 
0x000000000000005c: add eax, 0xe8; add byte ptr [rax - 1], cl; ret; 
0x000000000000040e: add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000000040d: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000000aa: and ah, bh; ret; 
0x00000000000003f3: and byte ptr [rdi], cl; and ah, bh; ret; 
0x000000000000000b: call 0x10; pop rbp; ret; 
0x0000000000000010: call 0x15; mov eax, 0x6666; pop rbp; ret; 
0x000000000000002c: call 0x31; mov eax, 0x5566; pop rbp; ret; 
0x0000000000000387: call 0x38c; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000000003e: call 0x43; pop rbp; ret; 
0x00000000000000a0: call 0xa5; push rbp; mov rbp, rsp; mov cr4, rdi; ret; 
0x000000000000001c: cmp eax, 0; jne 0x10; xor eax, eax; pop rbp; ret; 
0x0000000000000066: cmp ebx, 0x64; jne 0x50; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000003ec: cmp ebx, 0x666666; jne 0x414; mov cr4, rdi; ret; 
0x000000000000001b: cmp rax, 0; jne 0x10; xor eax, eax; pop rbp; ret; 
0x0000000000000065: cmp rbx, 0x64; jne 0x50; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000000002b: in eax, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5566; pop rbp; ret; 
0x000000000000000f: in eax, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6666; pop rbp; ret; 
0x000000000000000a: in eax, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000000a8: in eax, 0xf; and ah, bh; ret; 
0x0000000000000022: in eax, dx; xor eax, eax; pop rbp; ret; 
0x0000000000000173: inc dword ptr [rcx + 0x5c]; pop r13; pop rbp; ret; 
0x00000000000003ea: ja 0x42a; cmp ebx, 0x666666; jne 0x414; mov cr4, rdi; ret; 
0x000000000000018b: jmp qword ptr [rbx + 0xf]; 
0x0000000000000021: jne 0x10; xor eax, eax; pop rbp; ret; 
0x00000000000000e1: jne 0x136; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000003f2: jne 0x414; mov cr4, rdi; ret; 
0x0000000000000407: jne 0x49d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000000069: jne 0x50; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000000095: jne 0x99; leave; ret; 
0x00000000000000a9: mov cr4, rdi; ret; 
0x0000000000000039: mov dword ptr [rax], 0xe8000000; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000000031: mov eax, 0x5566; pop rbp; ret; 
0x0000000000000015: mov eax, 0x6666; pop rbp; ret; 
0x000000000000016e: mov eax, 0xffffffff; pop r12; pop r13; pop rbp; ret; 
0x000000000000008f: mov eax, dword ptr [rbp + 0x108]; jne 0x99; leave; ret; 
0x0000000000000009: mov ebp, esp; call 0x10; pop rbp; ret; 
0x000000000000000e: mov ebp, esp; call 0x15; mov eax, 0x6666; pop rbp; ret; 
0x000000000000002a: mov ebp, esp; call 0x31; mov eax, 0x5566; pop rbp; ret; 
0x00000000000000a7: mov ebp, esp; mov cr4, rdi; ret; 
0x0000000000000038: mov edi, 0; call 0x43; pop rbp; ret; 
0x000000000000016d: mov rax, -1; pop r12; pop r13; pop rbp; ret; 
0x000000000000008e: mov rax, qword ptr [rbp + 0x108]; jne 0x99; leave; ret; 
0x0000000000000008: mov rbp, rsp; call 0x10; pop rbp; ret; 
0x000000000000000d: mov rbp, rsp; call 0x15; mov eax, 0x6666; pop rbp; ret; 
0x0000000000000029: mov rbp, rsp; call 0x31; mov eax, 0x5566; pop rbp; ret; 
0x00000000000000a6: mov rbp, rsp; mov cr4, rdi; ret; 
0x0000000000000037: mov rdi, 0; call 0x43; pop rbp; ret; 
0x0000000000000091: or byte ptr [rcx], al; add byte ptr [rax], al; jne 0x99; leave; ret; 
0x000000000000022f: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000000166: pop r12; pop r13; pop rbp; ret; 
0x0000000000000231: pop r13; pop r14; pop rbp; ret; 
0x0000000000000168: pop r13; pop rbp; ret; 
0x0000000000000233: pop r14; pop rbp; ret; 
0x0000000000000232: pop rbp; pop r14; pop rbp; ret; 
0x0000000000000169: pop rbp; pop rbp; ret; 
0x0000000000000025: pop rbp; ret; 
0x000000000000016c: pop rbx; mov rax, -1; pop r12; pop r13; pop rbp; ret; 
0x0000000000000165: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000000001ca: pop rbx; pop rbp; ret; 
0x0000000000000234: pop rsi; pop rbp; ret; 
0x0000000000000230: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000000167: pop rsp; pop r13; pop rbp; ret; 
0x0000000000000032: push bp; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000000033: push rbp; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000000a5: push rbp; mov rbp, rsp; mov cr4, rdi; ret; 
0x00000000000000e2: push rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000000164: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000000022e: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; pop r14; pop rbp; ret; 
0x0000000000000410: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000000408: test dword ptr [rax + 0x48000000], edx; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000000090: test dword ptr [rax], ecx; add dword ptr [rax], eax; add byte ptr [rbp + 2], dh; leave; ret; 
0x0000000000000162: xor byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000000022d: xor eax, eax; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000000023: xor eax, eax; pop rbp; ret; 
0x0000000000000163: xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000000038c: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000000097: leave; ret; 
0x000000000000009f: nop; call 0xa5; push rbp; mov rbp, rsp; mov cr4, rdi; ret; 
0x0000000000000026: ret; 
0x00000000000003ed: sti; add byte ptr [rbp + 0x20], dh; mov cr4, rdi; ret; 
0x0000000000000067: sti; jne 0x50; xor eax, eax; pop rbx; pop rbp; ret; 

137 gadgets found
